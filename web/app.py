#!/usr/bin/env python3
"""
Gemeinde Gmunden Transparenz-System
Optimiert f√ºr All-Hands.dev

Hauptanwendung f√ºr das B√ºrger-Web-Interface mit deutscher NLP-Suche
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import yaml
import json
import os
import sys
from pathlib import Path

# Pfad-Konfiguration
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.append(str(PROJECT_ROOT))

# Import der eigenen Module
from ai.nlp_processor import GermanNLPProcessor
from ai.fact_checker import FactChecker
from data.data_manager import DataManager
from monitoring.quality_monitor import QualityMonitor

# All-Hands.dev optimierte Streamlit-Konfiguration
st.set_page_config(
    page_title="Gemeinde Gmunden - Transparenz-Portal",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/gmunden/transparenz-system',
        'Report a bug': 'https://github.com/gmunden/transparenz-system/issues',
        'About': "Gemeinde Gmunden Transparenz-System - Vollst√§ndige Transparenz f√ºr alle B√ºrger"
    }
)

# CSS f√ºr All-Hands.dev Optimierung
st.markdown("""
<style>
    /* All-Hands.dev optimierte Styles */
    .main > div {
        padding-top: 2rem;
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .stApp {
        margin: 0;
        padding: 0;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
    }
    
    /* Qualit√§ts-Indikator */
    .quality-indicator {
        position: fixed;
        top: 10px;
        right: 10px;
        background: #28a745;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
        z-index: 1000;
    }
    
    .quality-indicator.warning {
        background: #ffc107;
        color: #000;
    }
    
    .quality-indicator.error {
        background: #dc3545;
    }
</style>
""", unsafe_allow_html=True)

class GmundenTransparenzApp:
    """Hauptanwendungsklasse f√ºr das Transparenz-System"""
    
    def __init__(self):
        self.load_config()
        self.init_components()
        self.setup_session_state()
    
    def load_config(self):
        """Lade Konfigurationsdateien"""
        try:
            config_path = PROJECT_ROOT / "config" / "system_settings.yaml"
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
        except Exception as e:
            st.error(f"Konfiguration konnte nicht geladen werden: {e}")
            self.config = {}
    
    def init_components(self):
        """Initialisiere alle System-Komponenten"""
        try:
            self.nlp_processor = GermanNLPProcessor()
            self.fact_checker = FactChecker()
            self.data_manager = DataManager()
            self.quality_monitor = QualityMonitor()
        except Exception as e:
            st.error(f"Komponenten konnten nicht initialisiert werden: {e}")
    
    def setup_session_state(self):
        """Setup Session State f√ºr Streamlit"""
        if 'search_history' not in st.session_state:
            st.session_state.search_history = []
        if 'quality_score' not in st.session_state:
            st.session_state.quality_score = 100
        if 'last_search' not in st.session_state:
            st.session_state.last_search = None
    
    def render_header(self):
        """Render Header mit Qualit√§ts-Indikator"""
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col1:
            st.image("https://via.placeholder.com/100x60/1f77b4/ffffff?text=GMUNDEN", width=100)
        
        with col2:
            st.title("üèõÔ∏è Gemeinde Gmunden")
            st.subheader("Transparenz-Portal f√ºr alle B√ºrger")
        
        with col3:
            quality_score = st.session_state.quality_score
            if quality_score >= 90:
                quality_class = "quality-indicator"
                quality_text = "‚úÖ Hohe Datenqualit√§t"
            elif quality_score >= 70:
                quality_class = "quality-indicator warning"
                quality_text = "‚ö†Ô∏è Mittlere Datenqualit√§t"
            else:
                quality_class = "quality-indicator error"
                quality_text = "‚ùå Niedrige Datenqualit√§t"
            
            st.markdown(f'<div class="{quality_class}">{quality_text}</div>', 
                       unsafe_allow_html=True)
    
    def render_search_interface(self):
        """Render die Haupt-Suchoberfl√§che"""
        st.markdown("---")
        st.markdown("### üîç Stellen Sie Ihre Frage in normaler deutscher Sprache")
        
        # Beispiel-Fragen
        with st.expander("üí° Beispiel-Fragen"):
            st.markdown("""
            - *"Wie viel gab die Gemeinde 2023 f√ºr Stra√üenreparaturen aus?"*
            - *"Zeige mir alle Gemeinderatsprotokolle von 2022"*
            - *"Welche Ausgaben √ºber 10.000 Euro gab es im letzten Jahr?"*
            - *"Finde Dokumente √ºber Wasserleitungsprojekte"*
            - *"Wie entwickelten sich die Personalkosten zwischen 2020 und 2023?"*
            """)
        
        # Haupt-Suchfeld
        user_query = st.text_input(
            "Ihre Frage:",
            placeholder="z.B. 'Zeige mir die Ausgaben f√ºr Infrastruktur in 2023'",
            key="main_search"
        )
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            search_button = st.button("üîç Suchen", type="primary")
        
        with col2:
            if st.button("üé≤ Zuf√§llige Frage"):
                user_query = self.get_random_question()
                st.rerun()
        
        if search_button and user_query:
            self.process_search_query(user_query)
    
    def get_random_question(self):
        """Generiere eine zuf√§llige Beispiel-Frage"""
        questions = [
            "Zeige mir die Ausgaben von 2023",
            "Welche Projekte wurden 2022 durchgef√ºhrt?",
            "Wie hoch waren die Personalkosten im letzten Jahr?",
            "Finde alle Protokolle √ºber Stra√üenbau",
            "Zeige mir die gr√∂√üten Ausgaben der letzten 5 Jahre"
        ]
        import random
        return random.choice(questions)
    
    def process_search_query(self, query):
        """Verarbeite Suchanfrage mit NLP und Qualit√§tskontrolle"""
        with st.spinner("ü§ñ Analysiere Ihre Anfrage..."):
            try:
                # NLP-Verarbeitung
                nlp_result = self.nlp_processor.analyze_query(query)
                
                # Datensuche
                search_results = self.data_manager.search(nlp_result)
                
                # Qualit√§tspr√ºfung
                quality_check = self.fact_checker.verify_results(search_results)
                
                # Ergebnisse anzeigen
                self.display_search_results(query, search_results, quality_check)
                
                # Suchhistorie aktualisieren
                st.session_state.search_history.append({
                    'query': query,
                    'timestamp': datetime.now(),
                    'results_count': len(search_results),
                    'quality_score': quality_check.get('score', 0)
                })
                
            except Exception as e:
                st.error(f"Fehler bei der Suche: {e}")
                st.info("Bitte versuchen Sie eine andere Formulierung.")
    
    def display_search_results(self, query, results, quality_check):
        """Zeige Suchergebnisse mit Visualisierungen"""
        st.markdown("---")
        st.markdown(f"### üìä Ergebnisse f√ºr: *'{query}'*")
        
        # Qualit√§ts-Warnung
        if quality_check.get('score', 100) < 80:
            st.warning(f"‚ö†Ô∏è Datenqualit√§t: {quality_check.get('score', 0)}% - "
                      f"Einige Ergebnisse k√∂nnten unvollst√§ndig sein.")
        
        if not results:
            st.info("üîç Keine Ergebnisse gefunden. Versuchen Sie andere Suchbegriffe.")
            return
        
        # Tabs f√ºr verschiedene Ansichten
        tab1, tab2, tab3, tab4 = st.tabs(["üìä √úbersicht", "üìã Details", "üìà Diagramme", "üìÑ Dokumente"])
        
        with tab1:
            self.render_overview_tab(results)
        
        with tab2:
            self.render_details_tab(results)
        
        with tab3:
            self.render_charts_tab(results)
        
        with tab4:
            self.render_documents_tab(results)
    
    def render_overview_tab(self, results):
        """Render √úbersichts-Tab"""
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Gefundene Eintr√§ge", len(results))
        
        with col2:
            total_amount = sum(r.get('betrag', 0) for r in results if 'betrag' in r)
            st.metric("Gesamtsumme", f"‚Ç¨ {total_amount:,.2f}")
        
        with col3:
            years = set(r.get('jahr') for r in results if 'jahr' in r)
            st.metric("Betroffene Jahre", len(years))
        
        with col4:
            categories = set(r.get('kategorie') for r in results if 'kategorie' in r)
            st.metric("Kategorien", len(categories))
        
        # Top-Ergebnisse
        if results:
            st.markdown("#### üîù Top-Ergebnisse")
            df = pd.DataFrame(results[:10])
            st.dataframe(df, use_container_width=True)
    
    def render_details_tab(self, results):
        """Render Details-Tab"""
        st.markdown("#### üìã Detaillierte Ergebnisse")
        
        for i, result in enumerate(results[:20]):  # Limitiere auf 20 Ergebnisse
            with st.expander(f"Eintrag {i+1}: {result.get('beschreibung', 'Unbekannt')[:50]}..."):
                col1, col2 = st.columns(2)
                
                with col1:
                    for key, value in result.items():
                        if key not in ['_id', 'ocr_text']:  # Gro√üe Felder ausblenden
                            st.write(f"**{key.title()}:** {value}")
                
                with col2:
                    if 'quelle' in result:
                        st.info(f"üìÑ Quelle: {result['quelle']}")
                    if 'datum' in result:
                        st.info(f"üìÖ Datum: {result['datum']}")
    
    def render_charts_tab(self, results):
        """Render Diagramme-Tab"""
        st.markdown("#### üìà Visualisierungen")
        
        # Nur wenn numerische Daten vorhanden
        numeric_results = [r for r in results if 'betrag' in r and 'jahr' in r]
        
        if numeric_results:
            df = pd.DataFrame(numeric_results)
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Ausgaben nach Jahr
                yearly_data = df.groupby('jahr')['betrag'].sum().reset_index()
                fig1 = px.bar(yearly_data, x='jahr', y='betrag', 
                             title="Ausgaben nach Jahr")
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                # Ausgaben nach Kategorie
                if 'kategorie' in df.columns:
                    category_data = df.groupby('kategorie')['betrag'].sum().reset_index()
                    fig2 = px.pie(category_data, values='betrag', names='kategorie',
                                 title="Ausgaben nach Kategorie")
                    st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("üìä Keine numerischen Daten f√ºr Diagramme verf√ºgbar.")
    
    def render_documents_tab(self, results):
        """Render Dokumente-Tab"""
        st.markdown("#### üìÑ Gefundene Dokumente")
        
        doc_results = [r for r in results if 'filename' in r or 'dokument' in r]
        
        if doc_results:
            for doc in doc_results[:10]:
                with st.expander(f"üìÑ {doc.get('filename', 'Unbekanntes Dokument')}"):
                    if 'pdf_title' in doc:
                        st.write(f"**Titel:** {doc['pdf_title']}")
                    if 'typ' in doc:
                        st.write(f"**Typ:** {doc['typ']}")
                    if 'ocr_text' in doc:
                        st.write("**Inhalt (Auszug):**")
                        st.text(doc['ocr_text'][:500] + "..." if len(doc['ocr_text']) > 500 else doc['ocr_text'])
        else:
            st.info("üìÑ Keine Dokumente in den Ergebnissen gefunden.")
    
    def render_sidebar(self):
        """Render Sidebar mit zus√§tzlichen Funktionen"""
        with st.sidebar:
            st.markdown("### üõ†Ô∏è Erweiterte Funktionen")
            
            # Suchhistorie
            if st.session_state.search_history:
                st.markdown("#### üìö Suchhistorie")
                for i, search in enumerate(reversed(st.session_state.search_history[-5:])):
                    if st.button(f"üîç {search['query'][:30]}...", key=f"history_{i}"):
                        st.session_state.main_search = search['query']
                        st.rerun()
            
            st.markdown("---")
            
            # Datenquellen-Status
            st.markdown("#### üìä Datenquellen")
            data_sources = self.data_manager.get_data_sources_status()
            for source, status in data_sources.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                st.write(f"{status_icon} {source}")
            
            st.markdown("---")
            
            # System-Info
            st.markdown("#### ‚ÑπÔ∏è System-Information")
            st.write(f"**Version:** 2.0.0")
            st.write(f"**Letzte Aktualisierung:** {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            st.write(f"**Datenqualit√§t:** {st.session_state.quality_score}%")
    
    def run(self):
        """Hauptfunktion der Anwendung"""
        try:
            self.render_header()
            self.render_search_interface()
            self.render_sidebar()
            
            # Footer
            st.markdown("---")
            st.markdown("""
            <div style='text-align: center; color: #666; padding: 20px;'>
                üèõÔ∏è Gemeinde Gmunden Transparenz-Portal<br>
                Optimiert f√ºr All-Hands.dev | Alle Daten sind √∂ffentlich zug√§nglich
            </div>
            """, unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"Anwendungsfehler: {e}")
            st.info("Bitte laden Sie die Seite neu.")

# Hauptanwendung
if __name__ == "__main__":
    app = GmundenTransparenzApp()
    app.run()